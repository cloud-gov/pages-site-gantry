---
import { createGetStaticPath, fetchSlug } from "@/utilities/fetch";
import { tryParseDateParts } from "@/utilities/dates";
import PagesSection from "@/components/PagesSection.astro";
import Layout from "@/layouts/Layout.astro";
import RichText from "@/components/RichText.astro";
import Tags from "@/components/Tags.astro";
import type { CollectionEntry } from "astro:content";

const { slug } = Astro.params;

// TODO: this section is going to be largely copy/paste for each
// individual page but it's unclear how to generalize it further:
// 1. the getStaticPaths must be exported from this file
// 2. the Astro.props/Astro.prerendered properties are specific
// to this file
// 3. data needs to be a top-level variable here

const collectionName = "events";
let data: CollectionEntry<typeof collectionName>["data"];

if (!Astro.isPrerendered) {
  data = await fetchSlug(collectionName, slug);
  if (!data) return Astro.redirect("/404");
} else {
  // @ts-expect-error
  ({ data } = Astro.props);
}

const start = tryParseDateParts(data.startDate);
const end = tryParseDateParts(data.endDate);

export const getStaticPaths = createGetStaticPath("events");

export const prerender = import.meta.env.PREVIEW_MODE || false;
---

<Layout title="events">
  <PagesSection heading={data.title}>
    {
      data.categories && data.categories.length > 0 && (
        <div class="margin-bottom-3">
          <Tags
            tags={data.categories.map((cat) => ({
              label: cat.title,
              url: `/events?category=${cat.slug}`,
            }))}
          />
        </div>
      )
    }

    <div
      class="usa-summary-box maxw-tablet margin-bottom-2"
      role="region"
      aria-labelledby={`event-details-${slug}`}
    >
      <div class="usa-summary-box__body">
        <h2 class="usa-summary-box__heading" id={`event-details-${slug}`}>
          Event details
        </h2>
        <div class="usa-summary-box__text">
          <ul class="usa-list">
            <li>
              <b>Format:</b>{" "}
              {data.format === "inperson" ? "In-Person" : "Virtual"}
            </li>
            <li>
              <b>Type:</b>{" "}
              {data.eventType === "onetime" ? "One Time" : "Series"}
            </li>
            {
              data.location && (
                <li>
                  <b>Location:</b> {data.location}
                </li>
              )
            }
            <li>
              <b>Date and time:</b>
              {start.full}
              {end && <span>until {end!.full}</span>}
            </li>
            {
              data.pointOfContact && (
                <li>
                  <b>Point of Contact:</b> {data.pointOfContact}
                </li>
              )
            }
            {
              data.pointOfContactEmail && (
                <li>
                  <b>Contact Email:</b>{" "}
                  <a href={`mailto:${data.pointOfContactEmail}`}>
                    {data.pointOfContactEmail}
                  </a>
                </li>
              )
            }
            {
              data.pointOfContactPhone && (
                <li>
                  <b>Contact Phone:</b>{" "}
                  <a href={`tel:${data.pointOfContactPhone}`}>
                    {data.pointOfContactPhone}
                  </a>
                </li>
              )
            }
          </ul>
        </div>
      </div>
    </div>
    <section>
      {data.description && <p class="margin-bottom-2">{data.description}</p>}
      <a class="usa-button" href={data.registrationUrl}>Register</a>
    </section>

    {
      data.content && (
        <section class="margin-top-4">
          <RichText content={data.content} />
        </section>
      )
    }

    {
      data.attachments && data.attachments.length > 0 && (
        <section class="margin-top-4">
          <h3>Event Materials</h3>
          <ul class="usa-list">
            {data.attachments.map((attachment) => (
              <li>
                <a
                  href={attachment.file.url}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  {attachment.file.filename}
                </a>
              </li>
            ))}
          </ul>
        </section>
      )
    }
  </PagesSection>
</Layout>
