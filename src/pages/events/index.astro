---
import CollectionItemList from "@/components/CollectionItemList.astro";
import PagesSection from "@/components/PagesSection.astro";
import Layout from "@/layouts/Layout.astro";
import { eventsMapper } from "@/utilities/contentMapper";
import payloadFetch from "@/utilities/payload-fetch";
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { paginate } from "@/utilities/pagination";
import PaginationNav from "@/components/PaginationNav.astro";

const PAGE_SIZE = 10;
const siteUrl = import.meta.env.BASEURL || "";
const { page } = Astro.params;

const currentPage = parseInt(page) || 1;

const collectionName = "events";
let events: CollectionEntry<typeof collectionName>["data"][];

if (!Astro.isPrerendered) {
  const response = await payloadFetch(`${collectionName}?draft=true`);
  const eventsData = await response.json();
  events = eventsData.docs;
} else {
  const eventsCollection = await getCollection(collectionName);
  events = eventsCollection.map((n) => n.data);
}

const sortedEvents = events.sort((a, b) => {
  const dateA = new Date(a.publishedAt);
  const dateB = new Date(b.publishedAt);
  return dateB.getTime() - dateA.getTime();
});

const { totalPages, paginatedItems } = paginate(sortedEvents, currentPage, PAGE_SIZE);

const items = paginatedItems.map(eventsMapper);
---

<Layout title="events" canonical="/events/page/1">
  <PagesSection heading="Events">
    <CollectionItemList showEvent hideDate={true} items={items}/>
    {events.length >= PAGE_SIZE && (
      <PaginationNav currentPage={currentPage} totalPages={totalPages} basePath={`${siteUrl}/events/page`} />
    )}
  </PagesSection>
</Layout>
