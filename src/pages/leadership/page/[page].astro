---
import { type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import PagesSection from "@/components/PagesSection.astro";
import CollectionItemList from "@/components/CollectionItemList.astro";
import payloadFetch from "@/utilities/payload-fetch";
import { leadershipMapper } from "@/utilities/contentMapper";
import { paginate } from "@/utilities/pagination";
import PaginationNav from "@/components/PaginationNav.astro";
import { createPagingStaticPath } from "@/utilities/staticPath";

export const PAGE_SIZE = 10;
const siteUrl = import.meta.env.BASEURL || "";
const { page } = Astro.params;

const currentPage = parseInt(page) || 1;

const collectionName = "leadership";
let people: CollectionEntry<typeof collectionName>["data"][];

const response = await payloadFetch(`${collectionName}?draft=true`);
const responseData = await response.json();
people = responseData.docs;

const sortedLeadership = people.sort((a, b) => {
  const dateA = new Date(a.createdAt);
  const dateB = new Date(b.createdAt);
  return dateB.getTime() - dateA.getTime();
})

const { totalPages, paginatedItems } = paginate(sortedLeadership, currentPage, PAGE_SIZE);

const items = paginatedItems.map(leadershipMapper);

export const getStaticPaths = createPagingStaticPath(PAGE_SIZE , "leadership");
export const prerender = true;
---

<Layout title="Leadership">
  <PagesSection heading="Leadership" color="gray-10">
    <CollectionItemList items={items} />
    {people.length >= PAGE_SIZE && (
      <PaginationNav currentPage={currentPage} totalPages={totalPages} basePath={`${siteUrl}leadership/page`} />
    )}
  </PagesSection>
</Layout>
