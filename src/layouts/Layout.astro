---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import GovIdentifier from "@/components/GovIdentifier.astro";
import Menu from "@/components/Menu.astro";
import Breadcrumb from "@/components/Breadcrumb.astro";
import Footer from "@/components/Footer.astro";
import Config from "@/config.astro";
import { getMediaUrl } from "@/utilities/media";
import "../styles/index.scss";
import DigitalAnalytics from "@/components/DigitalAnalytics.astro";
import {
  fetchSiteConfig,
  fetchMenu,
  fetchPreFooter,
  preFooterMapper,
} from "@/utilities/fetch";
import { type PreFooterModel } from "@/env";

const siteConfigCollectionName = "siteConfig";
const menuCollectionName = "menu";
const preFooterCollectionName = "preFooter";

let siteConfig: CollectionEntry<typeof siteConfigCollectionName>["data"];
let menu: CollectionEntry<typeof menuCollectionName>["data"];
let preFooterResponseData: CollectionEntry<
  typeof preFooterCollectionName
>["data"];
let preFooter: PreFooterModel;

if (!Astro.isPrerendered) {
  siteConfig = await fetchSiteConfig();
  menu = await fetchMenu();
  preFooterResponseData = await fetchPreFooter();
} else {
  const siteConfigResponseData = await getCollection(siteConfigCollectionName);
  const menuResponseData = await getCollection(menuCollectionName);
  const preFooterResponse = await getCollection(preFooterCollectionName);
  preFooterResponseData = preFooterResponse[0]?.data;

  siteConfig = {
    agencyName:
      siteConfigResponseData[0]?.data?.agencyName || "Agency Homepage",
    searchAccessKey: siteConfigResponseData[0]?.data?.searchAccessKey,
    searchAffiliate: siteConfigResponseData[0]?.data?.searchAffiliate,
    dapAgencyCode: siteConfigResponseData[0]?.data?.dapAgencyCode,
    dapSubAgencyCode: siteConfigResponseData[0]?.data?.dapSubAgencyCode,
  };

  menu = {
    items: menuResponseData[0]?.data?.items || [],
  };
}

preFooter = preFooterMapper(preFooterResponseData);

// TODO: Add meta title and description to site config
const { title, description, socialImage, canonical } = Astro.props;
const metaTitle = title
  ? `${title} | ${siteConfig.agencyName || "Agency Homepage"}`
  : siteConfig.agencyName || "Agency Homepage";

// Get proper URL for social image
const socialImageUrl = socialImage ? getMediaUrl(socialImage) : null;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{metaTitle}</title>
    {description && <meta name="description" content={description} />}
    {canonical && <link rel="canonical" href={canonical} />}

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={metaTitle} />
    {description && <meta property="og:description" content={description} />}
    {socialImageUrl && <meta property="og:image" content={socialImageUrl} />}

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={metaTitle} />
    {description && <meta name="twitter:description" content={description} />}
    {socialImageUrl && <meta name="twitter:image" content={socialImageUrl} />}
  </head>
  <body>
    <Config />
    <GovIdentifier />
    <Menu
      title={siteConfig.agencyName}
      items={menu?.items || []}
      searchAccessKey={siteConfig?.searchAccessKey}
      searchAffiliate={siteConfig.searchAffiliate}
    />
    <Breadcrumb />
    <main id="main-content">
      <slot />
    </main>
    <Footer preFooter={preFooter} />
    {
      siteConfig.dapAgencyCode && (
        <DigitalAnalytics
          dapAgencyCode={siteConfig.dapAgencyCode}
          dapSubAgencyCode={siteConfig.dapSubAgencyCode}
        />
      )
    }
  </body>

  <style>
    html,
    body {
      margin: 0;
      width: 100%;
      height: 100%;
    }
  </style>
  <script>
    import "@uswds/uswds";
  </script>
</html>
