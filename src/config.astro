---
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";
import { fetchSiteConfig } from "./utilities/fetch";

// This component renders an empty fragment but is really used for
// exporting configuration. Note that the empty render (and import into
// other modules) does seem to be necessary for this to refresh correctly
const collectionName = "siteConfig";

// Try to get the entry, but provide a fallback if it doesn't exist
let entry: CollectionEntry<typeof collectionName> | undefined;
try {
  entry = await getEntry("siteConfig", "main");
} catch (error) {
  console.warn("Could not get siteConfig entry:", error);
}

// Initialize data with default values
let data: { font?: string; agencyName?: string } = {
  font: "",
  agencyName: "",
};

// If we have an entry, use its data
if (entry) {
  data = entry.data;
}

// If not prerendered, try to fetch fresh data from the API
if (!Astro.isPrerendered) {
  try {
    const response = await fetchSiteConfig();
    if (response.ok) {
      const apiData = await response.json();
      data = { ...data, ...apiData };
    }
  } catch (error) {
    console.warn("Could not fetch site config from API:", error);
  }
}
---

<></>
